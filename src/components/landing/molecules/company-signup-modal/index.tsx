'use client';
import { authService } from '@api/auth.service';
import { companyService } from '@api/company.service';
import AcceptTermsCheckboxControl from '@components/hook-form/AcceptTermsCheckbox';
import { PhoneFieldControl } from '@components/hook-form/PhoneField';
import { TextFieldControl } from '@components/hook-form/TextField';
import { EMAIL_REGEX_V3, EMOJI_REGEX } from '@constants/regex';
import { yupResolver } from '@hookform/resolvers/yup';
import { HookFormProvider, useHookForm } from '@hooks/useHookForm';
import { FormTemplateProps } from '@interfaces/interfaces';
import recoilStore from '@recoil-store';
import cn, { trimObjectValues } from '@utils';
import { isPhoneValid } from '@utils/phone';
import { Modal, notification } from 'antd';
import { useRef, useState } from 'react';
import { useRecoilState } from 'recoil';
import * as Yup from 'yup';

interface CompanySignUpModalProps {}

const schema = Yup.object().shape({
  companyName: Yup.string()
    .label('T√™n c√¥ng ty')
    .required('Vui l√≤ng nh·∫≠p')
    .test(
      'no-emoji',
      'T√™n c√¥ng ty kh√¥ng h·ª£p l·ªá',
      (value: string) => !EMOJI_REGEX.test(value),
    )
    .trim('Kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu v√† cu·ªëi'),
  tax: Yup.string()
    .label('M√£ s·ªë thu·∫ø')
    .required('Vui l√≤ng nh·∫≠p')
    .matches(/^\d{10}(-\d{3})?$/, 'M√£ s·ªë thu·∫ø kh√¥ng h·ª£p l·ªá')
    .trim('Kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu v√† cu·ªëi'),
  email: Yup.string()
    .label('Email')
    .required('Vui l√≤ng nh·∫≠p')
    .email('Email kh√¥ng h·ª£p l·ªá')
    .matches(EMAIL_REGEX_V3, 'Email kh√¥ng h·ª£p l·ªá')
    .trim('Kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu v√† cu·ªëi'),
  phone: Yup.string()
    .label('S·ªë ƒëi·ªán tho·∫°i')
    .required('Vui l√≤ng nh·∫≠p')
    .test('check-phone', 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá', function (value) {
      const isValid = isPhoneValid(value);
      return isValid;
    })
    .trim('Kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu v√† cu·ªëi'),
  acceptTerms: Yup.bool()
    .required('Vui l√≤ng nh·∫≠p')
    .oneOf([true], 'Accept Terms is required'),
});

const CompanySignUpModal: React.FC<CompanySignUpModalProps> = ({}) => {
  const [openCompanySignUpModal, setOpenCompanySignUpModal] = useRecoilState(
    recoilStore.openCompanySignUpModal,
  );

  const [loading, setLoading] = useState(false);
  const [emailAddress, setEmailAddress] = useState('');
  const [isExpired, setIsExpired] = useState(false);
  const [tokenState, setTokenState] = useState('');

  const formTemplateRef = useRef<FormTemplateProps>(null);
  const methods = useHookForm({
    resolver: yupResolver(schema),
    shouldFocusError: true,
    defaultValues: {
      companyName: '',
      tax: '',
      phone: '',
      // name: '',
      email: '',
      acceptTerms: true,
    },
  });
  const { handleSubmit } = methods;

  const isDisabled = Boolean(
    !methods.watch('companyName') ||
      !methods.watch('tax') ||
      !methods.watch('email') ||
      !methods.watch('acceptTerms'),
  );

  const onFinish = async (values: any) => {
    setLoading(true);
    setEmailAddress(values.email);
    const { tax, email, acceptTerms, companyName } = methods.getValues();

    // const number = phoneUtil.parseAndKeepRawInput(phone, 'VN');
    // const formatPhone = phoneUtil.format(number, PNF.E164);

    try {
      const res = await companyService.register(
        trimObjectValues({
          company_name: companyName,
          tax_code: tax,
          // representative_name: name,
          representative_email: email,
          // representative_phone_number: phone,
          is_terms_agreed: acceptTerms,
        }),
      );
      if (res.state) {
        setTokenState(res.state);
      }
      setOpenCompanySignUpModal(false);
      notification.success({ message: 'ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng' });
    } catch (error: any) {
      console.log('üöÄ ~ onFinish ~ error:', error);

      const ERROR_MSG: any = {
        4001: 'M√£ s·ªë thu·∫ø ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω',
      };

      notification.warning({
        message:
          ERROR_MSG?.[error?.response?.data?.error] ||
          error?.response?.data?.message ||
          ERROR_MSG['4001'] ||
          'ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω',
      });
    } finally {
      setLoading(false);
    }
  };

  const onResendVerifyEmail = () => {
    setLoading(true);
    authService
      .resendVerifyByToken({
        state: tokenState,
      })
      .then(() => {
        setIsExpired(false);
        notification.success({
          message: 'Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ ƒëi·ªán t·ª≠ ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n!',
        });
      })
      .catch(() => {
        notification.warning({
          message: 'L·ªói kh√¥ng x√°c ƒë·ªãnh vui l√≤ng th·ª≠ l·∫°i sau.',
        });
      })
      .finally(() => {
        setLoading(false);
      });
  };

  return (
    <div>
      <Modal
        title=""
        open={openCompanySignUpModal}
        onCancel={() => {
          setOpenCompanySignUpModal(false);
        }}
        afterClose={() => {
          methods.reset();
        }}
        destroyOnClose
        height={450}
        wrapClassName="custom-modal"
        footer={null}
      >
        <div className="mb-5 flex flex-col gap-y-3">
          <p className="m-0 mx-auto text-center text-[20px] font-semibold leading-normal text-black">
            ƒêƒÉng k√Ω t√†i kho·∫£n doanh nghi·ªáp
          </p>
          <p className="m-0 text-center text-[15px] font-medium leading-[17px] text-black">
            Vi·ªác c·ªßa b·∫°n l√† t√¨m c√°ch ph√°t tri·ªÉn doanh nghi·ªáp, c√≤n s·ª©c kho·∫ª nh√¢n
            vi√™n c·ª© ƒë·ªÉ iVita h·ªó tr·ª£ b·∫°n qu·∫£n l√Ω ngay t·ª´ h√¥m nay.
          </p>
        </div>
        {/* Register form ------------------------------- */}
        <HookFormProvider {...methods}>
          <form onSubmit={handleSubmit(onFinish)}>
            <div className="flex flex-col gap-y-4">
              <TextFieldControl
                label="M√£ s·ªë thu·∫ø"
                placeholder="Nh·∫≠p MST"
                name="tax"
                required
                className="auth-input"
                noSpacing
                isFloatInput
              />
              <TextFieldControl
                label="T√™n doanh nghi·ªáp"
                placeholder="Nh·∫≠p t√™n doanh nghi·ªáp"
                name="companyName"
                required
                className="auth-input"
                noSpacing
                isFloatInput
              />
              <TextFieldControl
                label="Email"
                placeholder="Nh·∫≠p email"
                name="email"
                required
                className="auth-input"
                noSpacing
                isFloatInput
              />
              <PhoneFieldControl
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                name="phone"
                required
                hideDropdown
              />
              <div className="">
                <AcceptTermsCheckboxControl
                  label="T√¥i ƒë√£ ƒë·ªçc v√† ƒë·ªìng √Ω v·ªõi ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng"
                  name="acceptTerms"
                  noSpacing
                />
              </div>
              {/*  */}
              <div className="flex flex-row items-center gap-x-[12px]">
                <button
                  type="submit"
                  disabled={isDisabled || loading}
                  className={cn(
                    'px-auto w-full rounded-[63px] border-none  bg-[#1FB46E] py-[15px] text-[15px] font-medium leading-[17px] text-white outline-none hover:opacity-[0.8] ',
                    {
                      'bg-[#F2F3F9]': isDisabled,
                      'text-[#A2ACC0]': isDisabled,
                      '[box-shadow:_0px_-3.44px_6.881px_0px_rgba(244, 245, 250, 0.60)_inset]':
                        isDisabled,
                      'shadow-[0px_12px_12px_-12px_#14819999]': !isDisabled,
                    },
                  )}
                >
                  ƒêƒÉng k√Ω
                </button>
              </div>
              <p className="m-0 mx-auto text-[15px] font-normal leading-[18px]">
                B·∫°n ƒë√£ c√≥ t√†i kho·∫£n?{' '}
                <span
                  className="text-[#1FB46E] underline hover:cursor-pointer"
                  onClick={() =>
                    window?.open('https://partner.ivita.vn', '_blank')
                  }
                >
                  ƒêƒÉng nh·∫≠p ngay
                </span>
              </p>
            </div>
          </form>
        </HookFormProvider>
      </Modal>
    </div>
  );
};

export default CompanySignUpModal;
